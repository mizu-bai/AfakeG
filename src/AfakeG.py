import math
import sys

ELEMENTS = [
    "Bq",
    "H",                                                                                                                                                                                     "He",
    "Li", "Be",                                                                                                                                                 "B", "C", "N", "O", "F", "Ne",
    "Na", "Mg",                                                                                                                                                 "Al", "Si", "P", "S", "Cl", "Ar",
    "K", "Ca", "Sc", "Ti", "V ", "Cr", "Mn", "Fe", "Co", "Ni", "Cu", "Zn",                                                                                     "Ga", "Ge", "As", "Se", "Br", "Kr",
    "Rb", "Sr", "Y", "Zr", "Nb", "Mo", "Te", "Ru", "Rh", "Pd", "Ag", "Cd",                                                                                     "In", "Sn", "Sb", "Te", "I", "Xe",
    "Cs", "Ba", "La", "Ce", "Pr", "Nd", "Pm", "Sm", "Eu", "Gd", "Tb", "Dy", "Ho", "Er", "Tm", "Yb", "Lu", "Hf", "Ta", "W ", "Re", "Os", "Ir", "Pt", "Au", "Hg", "Tl", "Pb", "Bi", "Po", "At", "Rn",
    "Fr", "Ra", "Ac", "Th", "Pa", "U ", "Np", "Pu", "Am", "Cm", "Bk", "Cf", "Es", "Fm", "Md", "No", "Lr", "Rf", "Db", "Sg", "Bh", "Hs", "Mt", "Ds", "Rg", "Cn", "Nh", "Fl", "Mc", "Lv", "Ts", "Og",
]

_ANCHOR_OPT = "Geom Opt Step"
_ANCHOR_CONV = "Geometry Convergence"
_ANCHOR_OPT_DONE = " Geometry Optimization Converged"

_ANCHOR_FREQ = "Frequency"
_ANCHOR_NORMAL_MODES = "Normal Modes"
_ANCHOR_IR = "IR spectrum"
_ANCHOR_IRC = "Intrinsic Reaction Coordinate"

_SEP_GRAD = " " + "Grad" * 18
_SEP_IRC = " " + "IRC-" * 17 + "IRC"
_SEP_DASH = " " + "-" * 69

_HEADER = f""" ! This file was generated by AfakeG.py
 ! https://github.com/mizu-bai/AfakeG

 0 basis functions
 0 alpha electrons
 0 beta electrons"""

_HEADER_FREQ = """ Harmonic frequencies (cm**-1), IR intensities (KM/Mole), Raman scattering
 activities (A**4/AMU), depolarization ratios for plane and unpolarized
 incident light, reduced masses (AMU), force constants (mDyne/A),
 and normal coordinates:"""

_TERMINATION = " Normal termination of Gaussian"

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python3 AfakeG.py mol.aop")

    aop = sys.argv[1]
    gop = aop.replace(".aop", "_fake.out")

    with open(gop, "w") as f_gop:
        print(_HEADER, file=f_gop)

    with open(aop) as f_aop:
        contents = f_aop.readlines()

    while contents:
        line = contents.pop(0)

        if _ANCHOR_IRC in line.rstrip():
            print(">>> Found IRC")

            with open(gop, "a") as f_gop:
                print(_SEP_IRC, file=f_gop)
                print(_SEP_IRC, file=f_gop)

            while line := contents.pop(0):
                if _ANCHOR_IRC in line:
                    break

                if "IRC Forward Step" in line or "IRC Backward Step" in line:
                    path_num = 1 if "IRC Forward Step" in line else 2
                    point_num = int(line.split()[-1])

                    print(
                        f" Point Number:{point_num:4d}          Path Number:{path_num:4d}")

                if "ETot =" in line:
                    E_tot = float(line.split()[2])

                    print(f" SCF Done:{E_tot:20.8f}")

        if _ANCHOR_OPT in line.rstrip():
            opt_step = int(line.split()[3])
            print(f">>> Found geometry optimization step {opt_step}")

            # parse current geometry
            # blank line
            _ = contents.pop(0)

            # Current Geometry
            _ = contents.pop(0)

            # blank line
            _ = contents.pop(0)

            geom = []

            while line := contents.pop(0).rstrip():
                arr = line.split()
                arr[1:] = [float(x) for x in arr[1:]]
                geom.append(arr)

            # parse geometry convergence
            # find anchor
            while _ANCHOR_CONV not in (line := contents.pop(0).rstrip()):
                pass

            # blank line
            _ = contents.pop(0)

            # current energy
            line = contents.pop(0).rstrip()
            arr = line.split()
            current_energy = float(arr[3])

            # energy change
            line = contents.pop(0).rstrip()
            arr = line.split()
            energy_change = float(arr[3])

            # conv conditions
            while "RMS Force" not in (line := contents.pop(0).rstrip()):
                pass

            # RMS Force, Max Force, RMS Step, & Max Step
            items = []
            thresholds = []

            for _ in range(4):
                arr = line.split()
                items.append(float(arr[2]))
                thresholds.append(float(arr[3]))
                line = contents.pop(0).rstrip()

            # write fake Gaussian output
            if opt_step == 1:
                with open(gop, "a") as f_gop:
                    print(_SEP_GRAD, file=f_gop)
                    print(_SEP_GRAD, file=f_gop)

            with open(gop, "a") as f_gop:
                fake_contents = [
                    f"{'Standard orientation:':>46s}\n",
                    f"{_SEP_DASH}\n",
                    " Center     Atomic      Atomic             Coordinates (Angstroms)\n",
                    " Number     Number       Type             X           Y           Z\n",
                    f"{_SEP_DASH}\n",
                ]

                for (atom_idx, atom) in enumerate(geom):
                    fake_contents.append(
                        f"{atom_idx:>7d}{ELEMENTS.index(atom[0]):>11d}{0:>12d}{atom[1]:>16.6f}{atom[2]:>12.6f}{atom[3]:>12.6f}\n"
                    )

                fake_contents.append(f"{_SEP_DASH}\n")
                fake_contents.append(f" SCF Done:{current_energy:>20.8f}\n\n")
                fake_contents.append(f"{_SEP_DASH}\n")

                fake_contents.append(f"{_SEP_GRAD}\n")
                fake_contents.append(f" Step number{opt_step:>4d}\n")
                fake_contents.append(
                    "         Item               Value     Threshold  Converged?\n"
                )

                fake_contents.append(
                    f" Maximum Force       {items[0]:>13.6f}{thresholds[0]:>13.6f}{('YES' if items[0] < thresholds[0] else 'NO'):>8s}\n"
                )
                fake_contents.append(
                    f" RMS     Force       {items[1]:>13.6f}{thresholds[1]:>13.6f}{('YES' if items[1] < thresholds[1] else 'NO'):>8s}\n"
                )
                fake_contents.append(
                    f" Maximum Displacement{items[2]:>13.6f}{thresholds[2]:>13.6f}{('YES' if items[2] < thresholds[2] else 'NO'):>8s}\n"
                )
                fake_contents.append(
                    f" RMS     Displacement{items[3]:>13.6f}{thresholds[3]:>13.6f}{('YES' if items[3] < thresholds[3] else 'NO'):>8s}\n"
                )

                fake_contents.append(
                    f"{_SEP_GRAD}\n\n",
                )

                f_gop.writelines(fake_contents)

        if _ANCHOR_OPT_DONE in line.rstrip():
            with open(gop, "a") as f_gop:
                print(_TERMINATION, file=f_gop)

        if _ANCHOR_FREQ in line.rstrip():
            print(">>> Found frequency")

            # parse frequencies
            with open(gop, "a") as f_gop:
                print(" ", file=f_gop)
                print(_HEADER_FREQ, file=f_gop)

            freq_list = []

            for _ in range(3):
                line = contents.pop(0)

            while line := contents.pop(0):
                if len(line.rstrip()) == 0:
                    break

                freq = float(line.split()[1])
                freq_list.append(freq)

            # parse ZPE
            line = contents.pop(0)
            # print(line)
            ZPE = float(line.split()[3])  # Hartree

            for _ in range(5):
                line = contents.pop(0).rstrip()

            elec_ZPE = float(line.split()[5])

            # parse normal mode
            normal_mode_list = [
                [0 for _ in range(len(geom) * 3)] for _ in range(len(freq_list))
            ]

            while line := contents.pop(0):
                if _ANCHOR_NORMAL_MODES in line:
                    for _ in range(math.ceil(len(freq_list) / 5)):
                        _ = contents.pop(0)  # blank line
                        cols = contents.pop(0)  # index iatom XYZ ...
                        nm_index = [int(x) for x in cols.split()[3:]]

                        for _ in range(len(geom) * 3):
                            line = contents.pop(0).rstrip()
                            arr = line.split()
                            idx = int(arr[0])
                            nm_list = [float(x) for x in arr[3:]]

                            for (inm, nm) in zip(nm_index, nm_list):
                                normal_mode_list[inm - 1][idx - 1] = nm

                    break

            # parse IR spectrum
            inten_list = []
            while line := contents.pop(0):
                if _ANCHOR_IR in line:
                    _ = contents.pop(0)  # blank line
                    _ = contents.pop(0)  # freq(cm^-1) T^2 Tx Ty Tz

                    for _ in freq_list:
                        line = contents.pop(0)
                        arr = line.split()
                        inten = float(arr[2]) * 2.0e-04
                        inten_list.append(inten)

                    break

            # parse thermodynamic quantities
            while line := contents.pop(0):
                if "Temperature" in line:
                    temperature = float(line.split()[1])  # K
                elif "Pressure" in line:
                    pressure = float(line.split()[1])  # atm
                elif "Thermal correction to U(T)" in line:
                    thermo_U = float(line.split()[-2])
                elif "Sum of electronic and U(T)" in line:
                    elec_U = float(line.split()[-2])
                elif "Thermal correction to H(T)" in line:
                    thermo_H = float(line.split()[-2])
                elif "Sum of electronic and H(T)" in line:
                    elec_H = float(line.split()[-2])
                elif "Thermal correction to G(T)" in line:
                    thermo_G = float(line.split()[-2])
                elif "Sum of electronic and G(T)" in line:
                    elec_G = float(line.split()[-2])
                    break

            # write freq
            for i in range(math.ceil(len(freq_list) / 3)):
                normal_mode_contents = []
                if len(freq_list) - 3 * i == 1:
                    # index of normal mode
                    normal_mode_contents.append(
                        f"{(3 * i + 1):23d}"
                    )

                    # symmetry
                    normal_mode_contents.append(
                        f"{'A':>23s}")

                    # freq
                    normal_mode_contents.append(
                        " Frequencies --"
                        f"{freq_list[3 * i]:12.4f}"
                    )

                    # inten
                    normal_mode_contents.append(
                        " IR Inten    --"
                        f"{inten_list[3 * i]:12.4f}"
                    )

                    # col
                    normal_mode_contents.append(
                        "  Atom  AN      X      Y      Z"
                    )

                    for (atom_idx, atom) in enumerate(geom):
                        normal_mode_contents.append(
                            f"{(atom_idx + 1):6d}{ELEMENTS.index(atom[0]):4d}"
                            f"{normal_mode_list[i][3 * atom_idx]:9.2f}"
                            f"{normal_mode_list[i][3 * atom_idx + 1]:7.2f}"
                            f"{normal_mode_list[i][3 * atom_idx + 2]:7.2f}"
                        )
                elif len(freq_list) - 3 * i == 2:
                    # index of normal mode
                    normal_mode_contents.append(
                        f"{(3 * i + 1):23d}"
                        f"{(3 * i + 2):23d}"
                    )

                    # symmetry
                    normal_mode_contents.append(f"{'A':>23s}{'A':>23s}")

                    # freq
                    normal_mode_contents.append(
                        " Frequencies --"
                        f"{freq_list[3 * i]:12.4f}"
                        f"{freq_list[3 * i + 1]:23.4f}"
                    )

                    # inten
                    normal_mode_contents.append(
                        " IR Inten    --"
                        f"{inten_list[3 * i]:12.4f}"
                        f"{inten_list[3 * i + 1]:23.4f}"
                    )

                    # col
                    normal_mode_contents.append(
                        "  Atom  AN      X      Y      Z        X      Y      Z"
                    )

                    for (atom_idx, atom) in enumerate(geom):
                        normal_mode_contents.append(
                            f"{(atom_idx + 1):6d}{ELEMENTS.index(atom[0]):4d}"
                            f"{normal_mode_list[i][3 * atom_idx]:9.2f}"
                            f"{normal_mode_list[i][3 * atom_idx + 1]:7.2f}"
                            f"{normal_mode_list[i][3 * atom_idx + 2]:7.2f}"
                            f"{normal_mode_list[i + 1][3 * atom_idx]:9.2f}"
                            f"{normal_mode_list[i + 1][3 * atom_idx + 1]:7.2f}"
                            f"{normal_mode_list[i + 1][3 * atom_idx + 2]:7.2f}"
                        )
                else:
                    # index of normal mode
                    normal_mode_contents.append(
                        f"{(3 * i + 1):23d}"
                        f"{(3 * i + 2):23d}"
                        f"{(3 * i + 3):23d}"
                    )

                    # symmetry
                    normal_mode_contents.append(
                        f"{'A':>23s}{'A':>23s}{'A':>23s}")

                    # freq
                    normal_mode_contents.append(
                        " Frequencies --"
                        f"{freq_list[3 * i]:12.4f}"
                        f"{freq_list[3 * i + 1]:23.4f}"
                        f"{freq_list[3 * i + 2]:23.4f}"
                    )

                    # inten
                    normal_mode_contents.append(
                        " IR Inten    --"
                        f"{inten_list[3 * i]:12.4f}"
                        f"{inten_list[3 * i + 1]:23.4f}"
                        f"{inten_list[3 * i + 2]:23.4f}"
                    )

                    # col
                    normal_mode_contents.append(
                        "  Atom  AN      X      Y      Z        X      Y      Z        X      Y      Z  ")

                    for (atom_idx, atom) in enumerate(geom):
                        normal_mode_contents.append(
                            f"{(atom_idx + 1):6d}{ELEMENTS.index(atom[0]):4d}"
                            f"{normal_mode_list[i][3 * atom_idx]:9.2f}"
                            f"{normal_mode_list[i][3 * atom_idx + 1]:7.2f}"
                            f"{normal_mode_list[i][3 * atom_idx + 2]:7.2f}"
                            f"{normal_mode_list[i + 1][3 * atom_idx]:9.2f}"
                            f"{normal_mode_list[i + 1][3 * atom_idx + 1]:7.2f}"
                            f"{normal_mode_list[i + 1][3 * atom_idx + 2]:7.2f}"
                            f"{normal_mode_list[i + 2][3 * atom_idx]:9.2f}"
                            f"{normal_mode_list[i + 2][3 * atom_idx + 1]:7.2f}"
                            f"{normal_mode_list[i + 2][3 * atom_idx + 2]:7.2f}"
                        )

                with open(gop, "a") as f_gop:
                    for line in normal_mode_contents:
                        print(line, file=f_gop)

            # write thermo
            with open(gop, "a") as f_gop:
                print(" ", file=f_gop)

                # temperature & pressure
                print(
                    f"Temperature{temperature:10.3f} Kelvin.  "
                    f"Pressure{pressure:10.5f} Atm.",
                    file=f_gop,
                )

                # ZPE
                print(
                    f" Zero-point correction={ZPE:35.6f} Hartree",
                    file=f_gop,
                )

                # thermal correction to energy
                print(
                    f" Thermal correction to Energy={thermo_U:28.6f}",
                    file=f_gop,
                )

                # thermal correction to enthalpy
                print(
                    f" Thermal correction to Enthalpy={thermo_H:26.6f}",
                    file=f_gop,
                )

                # thermal correction to Gibbs free energy
                print(
                    f" Thermal correction to Gibbs Free Energy={thermo_G:17.6f}",
                    file=f_gop,
                )

                # electronic energy
                print(
                    f" Electronic energy={current_energy:46.6f}",
                    file=f_gop,
                )

                # electronic energy + ZPE
                print(
                    f" Sum of electronic and zero-point Energies={elec_ZPE:22.6f}",
                    file=f_gop,
                )

                # electronic energy + thermal energy
                print(
                    f" Sum of electronic and thermal Energies={elec_U:26.6f}",
                    file=f_gop,
                )

                # electronic energy + enthalpy
                print(
                    f" Sum of electronic and thermal Enthalpies={elec_H:23.6f}",
                    file=f_gop,
                )

                # electronic energy + Gibbs free energy
                print(
                    f" Sum of electronic and thermal Free Energies={elec_G:20.6}",
                    file=f_gop
                )

                print(" ", file=f_gop)
                print(_TERMINATION, file=f_gop)

    print("大师大法好！")
